








DutyTwist = Ember.Application.create();
// DutyTwist.Router.reopen({location: 'history'})
;
// Generated by EmberScript 0.0.14
var set$ = Ember.set;
set$(DutyTwist, 'Assignment', Ember.Object.extend({
  person: null,
  duty: null,
  round: null
}));// Generated by EmberScript 0.0.14
var set$ = Ember.set;
var get$ = Ember.get;
set$(DutyTwist, 'Duty', Ember.Object.extend({ name: '' }));
get$(DutyTwist, 'Duty').reopenClass({
  find: function (id) {
    if (id) {
      return this.findAll()[id - 1];
    } else {
      return this.findAll();
    }
  },
  findAll: function () {
    return this._data || (this._data = get$(get$(DutyTwist, 'DATA'), 'duties').map(function (name) {
      return get$(DutyTwist, 'Duty').create({ name: name });
    }));
  },
  count: function () {
    return get$(this.findAll(), 'length');
  }
});// Generated by EmberScript 0.0.14
var get$ = Ember.get;
var set$ = Ember.set;
set$(DutyTwist, 'Person', Ember.Object.extend({
  name: '',
  offset: 0,
  id: Ember.computed(function () {
    return get$(this, 'name').parameterize();
  }).property('name'),
  dutyAt: function (round) {
    return get$(DutyTwist, 'Schedule').find().dutyAt(round, get$(this, 'offset'));
  },
  _assignments: Ember.computed(function () {
    return [];
  }).property(),
  findAssignment: function (roundNumber) {
    return get$(this, '_assignments')[roundNumber] || (get$(this, '_assignments')[roundNumber] = get$(get$(DutyTwist, 'Schedule').find().findRound(roundNumber), 'assignments')[get$(this, 'offset')]);
  }
}));
get$(DutyTwist, 'Person').reopenClass({
  find: function () {
    return this._data || (this._data = get$(get$(DutyTwist, 'DATA'), 'people').map(function (name, i) {
      return get$(DutyTwist, 'Person').create({
        name: name,
        offset: i
      });
    }));
  }
});// Generated by EmberScript 0.0.14
var get$ = Ember.get;
var set$ = Ember.set;
set$(DutyTwist, 'Round', Ember.Object.extend({
  number: 0,
  schedule: null,
  startTime: Ember.computed(function () {
    return get$(get$(this, 'schedule'), 'startTime') + get$(this, 'number') * get$(get$(this, 'schedule'), 'interval');
  }).property('schedule.startTime', 'number', 'schedule.interval'),
  startsOn: Ember.computed(function () {
    return new Date(get$(this, 'startTime'));
  }).property('startTime'),
  assignments: Ember.computed(function () {
    var n;
    n = get$(this, 'number');
    return get$(get$(this, 'schedule'), 'people').map(function (this$) {
      return function (person) {
        return get$(DutyTwist, 'Assignment').create({
          round: this$,
          person: person,
          duty: person.dutyAt(n)
        });
      };
    }(this));
  }).property('number', 'schedule.people.@each')
}));// Generated by EmberScript 0.0.14
var get$ = Ember.get;
var set$ = Ember.set;
set$(DutyTwist, 'Schedule', Ember.Object.extend({
  startTime: 0,
  interval: 7 * 24 * 60 * 60 * 1e3,
  currentRound: Ember.computed(function () {
    return Math.floor((new Date().getTime() - get$(this, 'startTime')) / get$(this, 'interval'));
  }).property(),
  dutyAt: function (round, offset) {
    var id;
    if (null == offset)
      offset = 0;
    id = (round + offset) % get$(DutyTwist, 'Duty').count() + 1;
    return get$(DutyTwist, 'Duty').find(id);
  },
  _rounds: Ember.computed(function () {
    return [];
  }).property(),
  findRound: function (number) {
    number = number * 1;
    return get$(this, '_rounds')[number] || (get$(this, '_rounds')[number] = get$(DutyTwist, 'Round').create({
      number: number,
      schedule: this
    }));
  },
  people: Ember.computed(function () {
    return get$(DutyTwist, 'Person').find();
  }).property(),
  duties: Ember.computed(function () {
    return get$(DutyTwist, 'Duty').find();
  }).property()
}));
get$(DutyTwist, 'Schedule').reopenClass({
  find: function () {
    return this._data || (this._data = get$(DutyTwist, 'Schedule').create({
      startTime: new Date(get$(get$(DutyTwist, 'DATA'), 'startDate')).getTime(),
      interval: get$(get$(DutyTwist, 'DATA'), 'interval') * 24 * 60 * 60 * 1e3
    }));
  }
});// Generated by EmberScript 0.0.14
var get$ = Ember.get;
var set$ = Ember.set;
set$(DutyTwist, 'IndexController', get$(Em, 'ArrayController').extend({
  rounds: Ember.computed(function () {
    var round, schedule;
    schedule = get$(DutyTwist, 'Schedule').find();
    round = get$(schedule, 'currentRound');
    return function () {
      var accum$;
      accum$ = [];
      for (var i$ = round - 1; round - 1 <= round + 5 ? i$ <= round + 5 : i$ >= round + 5; round - 1 <= round + 5 ? ++i$ : --i$)
        accum$.push(i$);
      return accum$;
    }.apply(this, arguments).map(function (number) {
      return schedule.findRound(number);
    });
  }).property()
}));// Generated by EmberScript 0.0.14
var get$ = Ember.get;
var set$ = Ember.set;
set$(DutyTwist, 'PersonAssignmentController', get$(Em, 'ObjectController').extend({
  previousAssignment: Ember.computed(function () {
    return get$(get$(this, 'model'), 'person').findAssignment(get$(get$(get$(this, 'model'), 'round'), 'number') - 1);
  }).property('model.person'),
  nextAssignment: Ember.computed(function () {
    return get$(get$(this, 'model'), 'person').findAssignment(get$(get$(get$(this, 'model'), 'round'), 'number') + 1);
  }).property('model.person')
}));// Generated by EmberScript 0.0.14
Ember.Handlebars.helper('localized-date', function (date) {
  return moment(date).format('D MMM');
});Ember.TEMPLATES["application"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1;


  stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n");
  return buffer;
  
});
Ember.TEMPLATES["index"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\n        <td>\n          ");
  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0],types:["STRING","ID"],data:data},helper ? helper.call(depth0, "person", "", options) : helperMissing.call(depth0, "link-to", "person", "", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n        </td>\n      ");
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\n            ");
  stack1 = helpers._triageMustache.call(depth0, "name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n          ");
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\n      <tr>\n        <td>");
  data.buffer.push(escapeExpression((helper = helpers['localized-date'] || (depth0 && depth0['localized-date']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "startsOn", options) : helperMissing.call(depth0, "localized-date", "startsOn", options))));
  data.buffer.push("</td>\n        ");
  stack1 = helpers.each.call(depth0, "assignments", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n      </tr>\n    ");
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\n          <td>\n            ");
  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:["STRING","ID","ID"],data:data},helper ? helper.call(depth0, "person.assignment", "person", "", options) : helperMissing.call(depth0, "link-to", "person.assignment", "person", "", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n          </td>\n        ");
  return buffer;
  }
function program6(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\n              ");
  stack1 = helpers._triageMustache.call(depth0, "duty.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n            ");
  return buffer;
  }

  data.buffer.push("<table class=\"schedule\">\n  <thead>\n    <tr>\n      <td></td>\n      ");
  stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n    </tr>\n  </thead>\n  <tbody>\n    ");
  stack1 = helpers.each.call(depth0, "rounds", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n  </tbody>\n</table>\n");
  return buffer;
  
});
Ember.TEMPLATES["person"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1;


  stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n");
  return buffer;
  
});
Ember.TEMPLATES["person/assignment"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  
  data.buffer.push("\n    <\n  ");
  }

function program3(depth0,data) {
  
  
  data.buffer.push("\n    index\n  ");
  }

function program5(depth0,data) {
  
  
  data.buffer.push("\n    >\n  ");
  }

  data.buffer.push("<nav>\n  ");
  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:["STRING","ID","ID"],data:data},helper ? helper.call(depth0, "person.assignment", "person", "previousAssignment", options) : helperMissing.call(depth0, "link-to", "person.assignment", "person", "previousAssignment", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n  ");
  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n  ");
  data.buffer.push(escapeExpression((helper = helpers['localized-date'] || (depth0 && depth0['localized-date']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "round.startsOn", options) : helperMissing.call(depth0, "localized-date", "round.startsOn", options))));
  data.buffer.push("\n  ");
  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0,depth0,depth0],types:["STRING","ID","ID"],data:data},helper ? helper.call(depth0, "person.assignment", "person", "nextAssignment", options) : helperMissing.call(depth0, "link-to", "person.assignment", "person", "nextAssignment", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n</nav>\n<h1>");
  stack1 = helpers._triageMustache.call(depth0, "duty.name", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</h1>\n");
  return buffer;
  
});
(function() {
  DutyTwist.Router.map(function() {
    return this.route("person", {
      path: ":person_id/"
    }, function() {
      return this.route("assignment", {
        path: ":round_number"
      });
    });
  });

}).call(this);
// Generated by EmberScript 0.0.14
var get$ = Ember.get;
var set$ = Ember.set;
set$(DutyTwist, 'IndexRoute', get$(Em, 'Route').extend({
  model: function () {
    return get$(DutyTwist, 'Person').find();
  }
}));// Generated by EmberScript 0.0.14
var get$ = Ember.get;
var set$ = Ember.set;
set$(DutyTwist, 'PersonAssignmentRoute', get$(Em, 'Route').extend({
  model: function (params) {
    return this.modelFor('person').findAssignment(get$(params, 'round_number'));
  },
  serialize: function (model) {
    return { round_number: get$(get$(model, 'round'), 'number') };
  }
}));// Generated by EmberScript 0.0.14
var get$ = Ember.get;
var set$ = Ember.set;
set$(DutyTwist, 'PersonRoute', get$(Em, 'Route').extend({
  model: function (params) {
    return get$(DutyTwist, 'Person').find().findBy('id', get$(params, 'person_id'));
  },
  afterModel: function (model) {
    return this.transitionTo('person.assignment', model, get$(get$(DutyTwist, 'Schedule').find(), 'currentRound'));
  }
}));